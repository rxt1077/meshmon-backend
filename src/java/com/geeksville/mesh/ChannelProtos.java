// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: channel.proto

package com.geeksville.mesh;

public final class ChannelProtos {
  private ChannelProtos() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ChannelSettingsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:ChannelSettings)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Deprecated in favor of LoraConfig.channel_num
     * </pre>
     *
     * <code>uint32 channel_num = 1 [deprecated = true];</code>
     * @deprecated ChannelSettings.channel_num is deprecated.
     *     See channel.proto;l=36
     * @return The channelNum.
     */
    @java.lang.Deprecated int getChannelNum();

    /**
     * <pre>
     * A simple pre-shared key for now for crypto.
     * Must be either 0 bytes (no crypto), 16 bytes (AES128), or 32 bytes (AES256).
     * A special shorthand is used for 1 byte long psks.
     * These psks should be treated as only minimally secure,
     * because they are listed in this source code.
     * Those bytes are mapped using the following scheme:
     * `0` = No crypto
     * `1` = The special "default" channel key: {0xd4, 0xf1, 0xbb, 0x3a, 0x20, 0x29, 0x07, 0x59, 0xf0, 0xbc, 0xff, 0xab, 0xcf, 0x4e, 0x69, 0xbf}
     * `2` through 10 = The default channel key, except with 1 through 9 added to the last byte.
     * Shown to user as simple1 through 10
     * </pre>
     *
     * <code>bytes psk = 2;</code>
     * @return The psk.
     */
    com.google.protobuf.ByteString getPsk();

    /**
     * <pre>
     * A SHORT name that will be packed into the URL.
     * Less than 12 bytes.
     * Something for end users to call the channel
     * If this is the empty string it is assumed that this channel
     * is the special (minimally secure) "Default"channel.
     * In user interfaces it should be rendered as a local language translation of "X".
     * For channel_num hashing empty string will be treated as "X".
     * Where "X" is selected based on the English words listed above for ModemPreset
     * </pre>
     *
     * <code>string name = 3;</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * A SHORT name that will be packed into the URL.
     * Less than 12 bytes.
     * Something for end users to call the channel
     * If this is the empty string it is assumed that this channel
     * is the special (minimally secure) "Default"channel.
     * In user interfaces it should be rendered as a local language translation of "X".
     * For channel_num hashing empty string will be treated as "X".
     * Where "X" is selected based on the English words listed above for ModemPreset
     * </pre>
     *
     * <code>string name = 3;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * Used to construct a globally unique channel ID.
     * The full globally unique ID will be: "name.id" where ID is shown as base36.
     * Assuming that the number of meshtastic users is below 20K (true for a long time)
     * the chance of this 64 bit random number colliding with anyone else is super low.
     * And the penalty for collision is low as well, it just means that anyone trying to decrypt channel messages might need to
     * try multiple candidate channels.
     * Any time a non wire compatible change is made to a channel, this field should be regenerated.
     * There are a small number of 'special' globally known (and fairly) insecure standard channels.
     * Those channels do not have a numeric id included in the settings, but instead it is pulled from
     * a table of well known IDs.
     * (see Well Known Channels FIXME)
     * </pre>
     *
     * <code>fixed32 id = 4;</code>
     * @return The id.
     */
    int getId();

    /**
     * <pre>
     * If true, messages on the mesh will be sent to the *public* internet by any gateway ndoe
     * </pre>
     *
     * <code>bool uplink_enabled = 5;</code>
     * @return The uplinkEnabled.
     */
    boolean getUplinkEnabled();

    /**
     * <pre>
     * If true, messages seen on the internet will be forwarded to the local mesh.
     * </pre>
     *
     * <code>bool downlink_enabled = 6;</code>
     * @return The downlinkEnabled.
     */
    boolean getDownlinkEnabled();
  }
  /**
   * <pre>
   * Full settings (center freq, spread factor, pre-shared secret key etc...)
   * needed to configure a radio for speaking on a particular channel This
   * information can be encoded as a QRcode/url so that other users can configure
   * their radio to join the same channel.
   * A note about how channel names are shown to users: channelname-Xy
   * poundsymbol is a prefix used to indicate this is a channel name (idea from &#64;professr).
   * Where X is a letter from A-Z (base 26) representing a hash of the PSK for this
   * channel - so that if the user changes anything about the channel (which does
   * force a new PSK) this letter will also change. Thus preventing user confusion if
   * two friends try to type in a channel name of "BobsChan" and then can't talk
   * because their PSKs will be different.
   * The PSK is hashed into this letter by "0x41 + [xor all bytes of the psk ] modulo 26"
   * This also allows the option of someday if people have the PSK off (zero), the
   * users COULD type in a channel name and be able to talk.
   * Y is a lower case letter from a-z that represents the channel 'speed' settings
   * (for some future definition of speed)
   * FIXME: Add description of multi-channel support and how primary vs secondary channels are used.
   * FIXME: explain how apps use channels for security.
   * explain how remote settings and remote gpio are managed as an example
   * </pre>
   *
   * Protobuf type {@code ChannelSettings}
   */
  public static final class ChannelSettings extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:ChannelSettings)
      ChannelSettingsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ChannelSettings.newBuilder() to construct.
    private ChannelSettings(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ChannelSettings() {
      psk_ = com.google.protobuf.ByteString.EMPTY;
      name_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ChannelSettings();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.geeksville.mesh.ChannelProtos.internal_static_ChannelSettings_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.geeksville.mesh.ChannelProtos.internal_static_ChannelSettings_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.geeksville.mesh.ChannelProtos.ChannelSettings.class, com.geeksville.mesh.ChannelProtos.ChannelSettings.Builder.class);
    }

    public static final int CHANNEL_NUM_FIELD_NUMBER = 1;
    private int channelNum_ = 0;
    /**
     * <pre>
     * Deprecated in favor of LoraConfig.channel_num
     * </pre>
     *
     * <code>uint32 channel_num = 1 [deprecated = true];</code>
     * @deprecated ChannelSettings.channel_num is deprecated.
     *     See channel.proto;l=36
     * @return The channelNum.
     */
    @java.lang.Override
    @java.lang.Deprecated public int getChannelNum() {
      return channelNum_;
    }

    public static final int PSK_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString psk_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * A simple pre-shared key for now for crypto.
     * Must be either 0 bytes (no crypto), 16 bytes (AES128), or 32 bytes (AES256).
     * A special shorthand is used for 1 byte long psks.
     * These psks should be treated as only minimally secure,
     * because they are listed in this source code.
     * Those bytes are mapped using the following scheme:
     * `0` = No crypto
     * `1` = The special "default" channel key: {0xd4, 0xf1, 0xbb, 0x3a, 0x20, 0x29, 0x07, 0x59, 0xf0, 0xbc, 0xff, 0xab, 0xcf, 0x4e, 0x69, 0xbf}
     * `2` through 10 = The default channel key, except with 1 through 9 added to the last byte.
     * Shown to user as simple1 through 10
     * </pre>
     *
     * <code>bytes psk = 2;</code>
     * @return The psk.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getPsk() {
      return psk_;
    }

    public static final int NAME_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private volatile java.lang.Object name_ = "";
    /**
     * <pre>
     * A SHORT name that will be packed into the URL.
     * Less than 12 bytes.
     * Something for end users to call the channel
     * If this is the empty string it is assumed that this channel
     * is the special (minimally secure) "Default"channel.
     * In user interfaces it should be rendered as a local language translation of "X".
     * For channel_num hashing empty string will be treated as "X".
     * Where "X" is selected based on the English words listed above for ModemPreset
     * </pre>
     *
     * <code>string name = 3;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * A SHORT name that will be packed into the URL.
     * Less than 12 bytes.
     * Something for end users to call the channel
     * If this is the empty string it is assumed that this channel
     * is the special (minimally secure) "Default"channel.
     * In user interfaces it should be rendered as a local language translation of "X".
     * For channel_num hashing empty string will be treated as "X".
     * Where "X" is selected based on the English words listed above for ModemPreset
     * </pre>
     *
     * <code>string name = 3;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ID_FIELD_NUMBER = 4;
    private int id_ = 0;
    /**
     * <pre>
     * Used to construct a globally unique channel ID.
     * The full globally unique ID will be: "name.id" where ID is shown as base36.
     * Assuming that the number of meshtastic users is below 20K (true for a long time)
     * the chance of this 64 bit random number colliding with anyone else is super low.
     * And the penalty for collision is low as well, it just means that anyone trying to decrypt channel messages might need to
     * try multiple candidate channels.
     * Any time a non wire compatible change is made to a channel, this field should be regenerated.
     * There are a small number of 'special' globally known (and fairly) insecure standard channels.
     * Those channels do not have a numeric id included in the settings, but instead it is pulled from
     * a table of well known IDs.
     * (see Well Known Channels FIXME)
     * </pre>
     *
     * <code>fixed32 id = 4;</code>
     * @return The id.
     */
    @java.lang.Override
    public int getId() {
      return id_;
    }

    public static final int UPLINK_ENABLED_FIELD_NUMBER = 5;
    private boolean uplinkEnabled_ = false;
    /**
     * <pre>
     * If true, messages on the mesh will be sent to the *public* internet by any gateway ndoe
     * </pre>
     *
     * <code>bool uplink_enabled = 5;</code>
     * @return The uplinkEnabled.
     */
    @java.lang.Override
    public boolean getUplinkEnabled() {
      return uplinkEnabled_;
    }

    public static final int DOWNLINK_ENABLED_FIELD_NUMBER = 6;
    private boolean downlinkEnabled_ = false;
    /**
     * <pre>
     * If true, messages seen on the internet will be forwarded to the local mesh.
     * </pre>
     *
     * <code>bool downlink_enabled = 6;</code>
     * @return The downlinkEnabled.
     */
    @java.lang.Override
    public boolean getDownlinkEnabled() {
      return downlinkEnabled_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (channelNum_ != 0) {
        output.writeUInt32(1, channelNum_);
      }
      if (!psk_.isEmpty()) {
        output.writeBytes(2, psk_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, name_);
      }
      if (id_ != 0) {
        output.writeFixed32(4, id_);
      }
      if (uplinkEnabled_ != false) {
        output.writeBool(5, uplinkEnabled_);
      }
      if (downlinkEnabled_ != false) {
        output.writeBool(6, downlinkEnabled_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (channelNum_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, channelNum_);
      }
      if (!psk_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, psk_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, name_);
      }
      if (id_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(4, id_);
      }
      if (uplinkEnabled_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, uplinkEnabled_);
      }
      if (downlinkEnabled_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, downlinkEnabled_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.geeksville.mesh.ChannelProtos.ChannelSettings)) {
        return super.equals(obj);
      }
      com.geeksville.mesh.ChannelProtos.ChannelSettings other = (com.geeksville.mesh.ChannelProtos.ChannelSettings) obj;

      if (getChannelNum()
          != other.getChannelNum()) return false;
      if (!getPsk()
          .equals(other.getPsk())) return false;
      if (!getName()
          .equals(other.getName())) return false;
      if (getId()
          != other.getId()) return false;
      if (getUplinkEnabled()
          != other.getUplinkEnabled()) return false;
      if (getDownlinkEnabled()
          != other.getDownlinkEnabled()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + CHANNEL_NUM_FIELD_NUMBER;
      hash = (53 * hash) + getChannelNum();
      hash = (37 * hash) + PSK_FIELD_NUMBER;
      hash = (53 * hash) + getPsk().hashCode();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + getId();
      hash = (37 * hash) + UPLINK_ENABLED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getUplinkEnabled());
      hash = (37 * hash) + DOWNLINK_ENABLED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getDownlinkEnabled());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.geeksville.mesh.ChannelProtos.ChannelSettings parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.geeksville.mesh.ChannelProtos.ChannelSettings parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.geeksville.mesh.ChannelProtos.ChannelSettings parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.geeksville.mesh.ChannelProtos.ChannelSettings parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.geeksville.mesh.ChannelProtos.ChannelSettings parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.geeksville.mesh.ChannelProtos.ChannelSettings parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.geeksville.mesh.ChannelProtos.ChannelSettings parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.geeksville.mesh.ChannelProtos.ChannelSettings parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.geeksville.mesh.ChannelProtos.ChannelSettings parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.geeksville.mesh.ChannelProtos.ChannelSettings parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.geeksville.mesh.ChannelProtos.ChannelSettings parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.geeksville.mesh.ChannelProtos.ChannelSettings parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.geeksville.mesh.ChannelProtos.ChannelSettings prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Full settings (center freq, spread factor, pre-shared secret key etc...)
     * needed to configure a radio for speaking on a particular channel This
     * information can be encoded as a QRcode/url so that other users can configure
     * their radio to join the same channel.
     * A note about how channel names are shown to users: channelname-Xy
     * poundsymbol is a prefix used to indicate this is a channel name (idea from &#64;professr).
     * Where X is a letter from A-Z (base 26) representing a hash of the PSK for this
     * channel - so that if the user changes anything about the channel (which does
     * force a new PSK) this letter will also change. Thus preventing user confusion if
     * two friends try to type in a channel name of "BobsChan" and then can't talk
     * because their PSKs will be different.
     * The PSK is hashed into this letter by "0x41 + [xor all bytes of the psk ] modulo 26"
     * This also allows the option of someday if people have the PSK off (zero), the
     * users COULD type in a channel name and be able to talk.
     * Y is a lower case letter from a-z that represents the channel 'speed' settings
     * (for some future definition of speed)
     * FIXME: Add description of multi-channel support and how primary vs secondary channels are used.
     * FIXME: explain how apps use channels for security.
     * explain how remote settings and remote gpio are managed as an example
     * </pre>
     *
     * Protobuf type {@code ChannelSettings}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:ChannelSettings)
        com.geeksville.mesh.ChannelProtos.ChannelSettingsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.geeksville.mesh.ChannelProtos.internal_static_ChannelSettings_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.geeksville.mesh.ChannelProtos.internal_static_ChannelSettings_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.geeksville.mesh.ChannelProtos.ChannelSettings.class, com.geeksville.mesh.ChannelProtos.ChannelSettings.Builder.class);
      }

      // Construct using com.geeksville.mesh.ChannelProtos.ChannelSettings.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        channelNum_ = 0;
        psk_ = com.google.protobuf.ByteString.EMPTY;
        name_ = "";
        id_ = 0;
        uplinkEnabled_ = false;
        downlinkEnabled_ = false;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.geeksville.mesh.ChannelProtos.internal_static_ChannelSettings_descriptor;
      }

      @java.lang.Override
      public com.geeksville.mesh.ChannelProtos.ChannelSettings getDefaultInstanceForType() {
        return com.geeksville.mesh.ChannelProtos.ChannelSettings.getDefaultInstance();
      }

      @java.lang.Override
      public com.geeksville.mesh.ChannelProtos.ChannelSettings build() {
        com.geeksville.mesh.ChannelProtos.ChannelSettings result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.geeksville.mesh.ChannelProtos.ChannelSettings buildPartial() {
        com.geeksville.mesh.ChannelProtos.ChannelSettings result = new com.geeksville.mesh.ChannelProtos.ChannelSettings(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.geeksville.mesh.ChannelProtos.ChannelSettings result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.channelNum_ = channelNum_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.psk_ = psk_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.name_ = name_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.id_ = id_;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.uplinkEnabled_ = uplinkEnabled_;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.downlinkEnabled_ = downlinkEnabled_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.geeksville.mesh.ChannelProtos.ChannelSettings) {
          return mergeFrom((com.geeksville.mesh.ChannelProtos.ChannelSettings)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.geeksville.mesh.ChannelProtos.ChannelSettings other) {
        if (other == com.geeksville.mesh.ChannelProtos.ChannelSettings.getDefaultInstance()) return this;
        if (other.getChannelNum() != 0) {
          setChannelNum(other.getChannelNum());
        }
        if (other.getPsk() != com.google.protobuf.ByteString.EMPTY) {
          setPsk(other.getPsk());
        }
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          bitField0_ |= 0x00000004;
          onChanged();
        }
        if (other.getId() != 0) {
          setId(other.getId());
        }
        if (other.getUplinkEnabled() != false) {
          setUplinkEnabled(other.getUplinkEnabled());
        }
        if (other.getDownlinkEnabled() != false) {
          setDownlinkEnabled(other.getDownlinkEnabled());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                channelNum_ = input.readUInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                psk_ = input.readBytes();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                name_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 37: {
                id_ = input.readFixed32();
                bitField0_ |= 0x00000008;
                break;
              } // case 37
              case 40: {
                uplinkEnabled_ = input.readBool();
                bitField0_ |= 0x00000010;
                break;
              } // case 40
              case 48: {
                downlinkEnabled_ = input.readBool();
                bitField0_ |= 0x00000020;
                break;
              } // case 48
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int channelNum_ ;
      /**
       * <pre>
       * Deprecated in favor of LoraConfig.channel_num
       * </pre>
       *
       * <code>uint32 channel_num = 1 [deprecated = true];</code>
       * @deprecated ChannelSettings.channel_num is deprecated.
       *     See channel.proto;l=36
       * @return The channelNum.
       */
      @java.lang.Override
      @java.lang.Deprecated public int getChannelNum() {
        return channelNum_;
      }
      /**
       * <pre>
       * Deprecated in favor of LoraConfig.channel_num
       * </pre>
       *
       * <code>uint32 channel_num = 1 [deprecated = true];</code>
       * @param value The channelNum to set.
       * @return This builder for chaining.
       */
      @java.lang.Deprecated public Builder setChannelNum(int value) {
        
        channelNum_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Deprecated in favor of LoraConfig.channel_num
       * </pre>
       *
       * <code>uint32 channel_num = 1 [deprecated = true];</code>
       * @return This builder for chaining.
       */
      @java.lang.Deprecated public Builder clearChannelNum() {
        bitField0_ = (bitField0_ & ~0x00000001);
        channelNum_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString psk_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * A simple pre-shared key for now for crypto.
       * Must be either 0 bytes (no crypto), 16 bytes (AES128), or 32 bytes (AES256).
       * A special shorthand is used for 1 byte long psks.
       * These psks should be treated as only minimally secure,
       * because they are listed in this source code.
       * Those bytes are mapped using the following scheme:
       * `0` = No crypto
       * `1` = The special "default" channel key: {0xd4, 0xf1, 0xbb, 0x3a, 0x20, 0x29, 0x07, 0x59, 0xf0, 0xbc, 0xff, 0xab, 0xcf, 0x4e, 0x69, 0xbf}
       * `2` through 10 = The default channel key, except with 1 through 9 added to the last byte.
       * Shown to user as simple1 through 10
       * </pre>
       *
       * <code>bytes psk = 2;</code>
       * @return The psk.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getPsk() {
        return psk_;
      }
      /**
       * <pre>
       * A simple pre-shared key for now for crypto.
       * Must be either 0 bytes (no crypto), 16 bytes (AES128), or 32 bytes (AES256).
       * A special shorthand is used for 1 byte long psks.
       * These psks should be treated as only minimally secure,
       * because they are listed in this source code.
       * Those bytes are mapped using the following scheme:
       * `0` = No crypto
       * `1` = The special "default" channel key: {0xd4, 0xf1, 0xbb, 0x3a, 0x20, 0x29, 0x07, 0x59, 0xf0, 0xbc, 0xff, 0xab, 0xcf, 0x4e, 0x69, 0xbf}
       * `2` through 10 = The default channel key, except with 1 through 9 added to the last byte.
       * Shown to user as simple1 through 10
       * </pre>
       *
       * <code>bytes psk = 2;</code>
       * @param value The psk to set.
       * @return This builder for chaining.
       */
      public Builder setPsk(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        psk_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A simple pre-shared key for now for crypto.
       * Must be either 0 bytes (no crypto), 16 bytes (AES128), or 32 bytes (AES256).
       * A special shorthand is used for 1 byte long psks.
       * These psks should be treated as only minimally secure,
       * because they are listed in this source code.
       * Those bytes are mapped using the following scheme:
       * `0` = No crypto
       * `1` = The special "default" channel key: {0xd4, 0xf1, 0xbb, 0x3a, 0x20, 0x29, 0x07, 0x59, 0xf0, 0xbc, 0xff, 0xab, 0xcf, 0x4e, 0x69, 0xbf}
       * `2` through 10 = The default channel key, except with 1 through 9 added to the last byte.
       * Shown to user as simple1 through 10
       * </pre>
       *
       * <code>bytes psk = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearPsk() {
        bitField0_ = (bitField0_ & ~0x00000002);
        psk_ = getDefaultInstance().getPsk();
        onChanged();
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * A SHORT name that will be packed into the URL.
       * Less than 12 bytes.
       * Something for end users to call the channel
       * If this is the empty string it is assumed that this channel
       * is the special (minimally secure) "Default"channel.
       * In user interfaces it should be rendered as a local language translation of "X".
       * For channel_num hashing empty string will be treated as "X".
       * Where "X" is selected based on the English words listed above for ModemPreset
       * </pre>
       *
       * <code>string name = 3;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * A SHORT name that will be packed into the URL.
       * Less than 12 bytes.
       * Something for end users to call the channel
       * If this is the empty string it is assumed that this channel
       * is the special (minimally secure) "Default"channel.
       * In user interfaces it should be rendered as a local language translation of "X".
       * For channel_num hashing empty string will be treated as "X".
       * Where "X" is selected based on the English words listed above for ModemPreset
       * </pre>
       *
       * <code>string name = 3;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * A SHORT name that will be packed into the URL.
       * Less than 12 bytes.
       * Something for end users to call the channel
       * If this is the empty string it is assumed that this channel
       * is the special (minimally secure) "Default"channel.
       * In user interfaces it should be rendered as a local language translation of "X".
       * For channel_num hashing empty string will be treated as "X".
       * Where "X" is selected based on the English words listed above for ModemPreset
       * </pre>
       *
       * <code>string name = 3;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        name_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A SHORT name that will be packed into the URL.
       * Less than 12 bytes.
       * Something for end users to call the channel
       * If this is the empty string it is assumed that this channel
       * is the special (minimally secure) "Default"channel.
       * In user interfaces it should be rendered as a local language translation of "X".
       * For channel_num hashing empty string will be treated as "X".
       * Where "X" is selected based on the English words listed above for ModemPreset
       * </pre>
       *
       * <code>string name = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        name_ = getDefaultInstance().getName();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A SHORT name that will be packed into the URL.
       * Less than 12 bytes.
       * Something for end users to call the channel
       * If this is the empty string it is assumed that this channel
       * is the special (minimally secure) "Default"channel.
       * In user interfaces it should be rendered as a local language translation of "X".
       * For channel_num hashing empty string will be treated as "X".
       * Where "X" is selected based on the English words listed above for ModemPreset
       * </pre>
       *
       * <code>string name = 3;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        name_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }

      private int id_ ;
      /**
       * <pre>
       * Used to construct a globally unique channel ID.
       * The full globally unique ID will be: "name.id" where ID is shown as base36.
       * Assuming that the number of meshtastic users is below 20K (true for a long time)
       * the chance of this 64 bit random number colliding with anyone else is super low.
       * And the penalty for collision is low as well, it just means that anyone trying to decrypt channel messages might need to
       * try multiple candidate channels.
       * Any time a non wire compatible change is made to a channel, this field should be regenerated.
       * There are a small number of 'special' globally known (and fairly) insecure standard channels.
       * Those channels do not have a numeric id included in the settings, but instead it is pulled from
       * a table of well known IDs.
       * (see Well Known Channels FIXME)
       * </pre>
       *
       * <code>fixed32 id = 4;</code>
       * @return The id.
       */
      @java.lang.Override
      public int getId() {
        return id_;
      }
      /**
       * <pre>
       * Used to construct a globally unique channel ID.
       * The full globally unique ID will be: "name.id" where ID is shown as base36.
       * Assuming that the number of meshtastic users is below 20K (true for a long time)
       * the chance of this 64 bit random number colliding with anyone else is super low.
       * And the penalty for collision is low as well, it just means that anyone trying to decrypt channel messages might need to
       * try multiple candidate channels.
       * Any time a non wire compatible change is made to a channel, this field should be regenerated.
       * There are a small number of 'special' globally known (and fairly) insecure standard channels.
       * Those channels do not have a numeric id included in the settings, but instead it is pulled from
       * a table of well known IDs.
       * (see Well Known Channels FIXME)
       * </pre>
       *
       * <code>fixed32 id = 4;</code>
       * @param value The id to set.
       * @return This builder for chaining.
       */
      public Builder setId(int value) {
        
        id_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Used to construct a globally unique channel ID.
       * The full globally unique ID will be: "name.id" where ID is shown as base36.
       * Assuming that the number of meshtastic users is below 20K (true for a long time)
       * the chance of this 64 bit random number colliding with anyone else is super low.
       * And the penalty for collision is low as well, it just means that anyone trying to decrypt channel messages might need to
       * try multiple candidate channels.
       * Any time a non wire compatible change is made to a channel, this field should be regenerated.
       * There are a small number of 'special' globally known (and fairly) insecure standard channels.
       * Those channels do not have a numeric id included in the settings, but instead it is pulled from
       * a table of well known IDs.
       * (see Well Known Channels FIXME)
       * </pre>
       *
       * <code>fixed32 id = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000008);
        id_ = 0;
        onChanged();
        return this;
      }

      private boolean uplinkEnabled_ ;
      /**
       * <pre>
       * If true, messages on the mesh will be sent to the *public* internet by any gateway ndoe
       * </pre>
       *
       * <code>bool uplink_enabled = 5;</code>
       * @return The uplinkEnabled.
       */
      @java.lang.Override
      public boolean getUplinkEnabled() {
        return uplinkEnabled_;
      }
      /**
       * <pre>
       * If true, messages on the mesh will be sent to the *public* internet by any gateway ndoe
       * </pre>
       *
       * <code>bool uplink_enabled = 5;</code>
       * @param value The uplinkEnabled to set.
       * @return This builder for chaining.
       */
      public Builder setUplinkEnabled(boolean value) {
        
        uplinkEnabled_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If true, messages on the mesh will be sent to the *public* internet by any gateway ndoe
       * </pre>
       *
       * <code>bool uplink_enabled = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearUplinkEnabled() {
        bitField0_ = (bitField0_ & ~0x00000010);
        uplinkEnabled_ = false;
        onChanged();
        return this;
      }

      private boolean downlinkEnabled_ ;
      /**
       * <pre>
       * If true, messages seen on the internet will be forwarded to the local mesh.
       * </pre>
       *
       * <code>bool downlink_enabled = 6;</code>
       * @return The downlinkEnabled.
       */
      @java.lang.Override
      public boolean getDownlinkEnabled() {
        return downlinkEnabled_;
      }
      /**
       * <pre>
       * If true, messages seen on the internet will be forwarded to the local mesh.
       * </pre>
       *
       * <code>bool downlink_enabled = 6;</code>
       * @param value The downlinkEnabled to set.
       * @return This builder for chaining.
       */
      public Builder setDownlinkEnabled(boolean value) {
        
        downlinkEnabled_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If true, messages seen on the internet will be forwarded to the local mesh.
       * </pre>
       *
       * <code>bool downlink_enabled = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearDownlinkEnabled() {
        bitField0_ = (bitField0_ & ~0x00000020);
        downlinkEnabled_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:ChannelSettings)
    }

    // @@protoc_insertion_point(class_scope:ChannelSettings)
    private static final com.geeksville.mesh.ChannelProtos.ChannelSettings DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.geeksville.mesh.ChannelProtos.ChannelSettings();
    }

    public static com.geeksville.mesh.ChannelProtos.ChannelSettings getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ChannelSettings>
        PARSER = new com.google.protobuf.AbstractParser<ChannelSettings>() {
      @java.lang.Override
      public ChannelSettings parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<ChannelSettings> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ChannelSettings> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.geeksville.mesh.ChannelProtos.ChannelSettings getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ChannelOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Channel)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The index of this channel in the channel table (from 0 to MAX_NUM_CHANNELS-1)
     * (Someday - not currently implemented) An index of -1 could be used to mean "set by name",
     * in which case the target node will find and set the channel by settings.name.
     * </pre>
     *
     * <code>int32 index = 1;</code>
     * @return The index.
     */
    int getIndex();

    /**
     * <pre>
     * The new settings, or NULL to disable that channel
     * </pre>
     *
     * <code>.ChannelSettings settings = 2;</code>
     * @return Whether the settings field is set.
     */
    boolean hasSettings();
    /**
     * <pre>
     * The new settings, or NULL to disable that channel
     * </pre>
     *
     * <code>.ChannelSettings settings = 2;</code>
     * @return The settings.
     */
    com.geeksville.mesh.ChannelProtos.ChannelSettings getSettings();
    /**
     * <pre>
     * The new settings, or NULL to disable that channel
     * </pre>
     *
     * <code>.ChannelSettings settings = 2;</code>
     */
    com.geeksville.mesh.ChannelProtos.ChannelSettingsOrBuilder getSettingsOrBuilder();

    /**
     * <pre>
     * TODO: REPLACE
     * </pre>
     *
     * <code>.Channel.Role role = 3;</code>
     * @return The enum numeric value on the wire for role.
     */
    int getRoleValue();
    /**
     * <pre>
     * TODO: REPLACE
     * </pre>
     *
     * <code>.Channel.Role role = 3;</code>
     * @return The role.
     */
    com.geeksville.mesh.ChannelProtos.Channel.Role getRole();
  }
  /**
   * <pre>
   * A pair of a channel number, mode and the (sharable) settings for that channel
   * </pre>
   *
   * Protobuf type {@code Channel}
   */
  public static final class Channel extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Channel)
      ChannelOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Channel.newBuilder() to construct.
    private Channel(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Channel() {
      role_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Channel();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.geeksville.mesh.ChannelProtos.internal_static_Channel_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.geeksville.mesh.ChannelProtos.internal_static_Channel_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.geeksville.mesh.ChannelProtos.Channel.class, com.geeksville.mesh.ChannelProtos.Channel.Builder.class);
    }

    /**
     * <pre>
     * How this channel is being used (or not).
     * Note: this field is an enum to give us options for the future.
     * In particular, someday we might make a 'SCANNING' option.
     * SCANNING channels could have different frequencies and the radio would
     * occasionally check that freq to see if anything is being transmitted.
     * For devices that have multiple physical radios attached, we could keep multiple PRIMARY/SCANNING channels active at once to allow
     * cross band routing as needed.
     * If a device has only a single radio (the common case) only one channel can be PRIMARY at a time
     * (but any number of SECONDARY channels can't be sent received on that common frequency)
     * </pre>
     *
     * Protobuf enum {@code Channel.Role}
     */
    public enum Role
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * This channel is not in use right now
       * </pre>
       *
       * <code>DISABLED = 0;</code>
       */
      DISABLED(0),
      /**
       * <pre>
       * This channel is used to set the frequency for the radio - all other enabled channels must be SECONDARY
       * </pre>
       *
       * <code>PRIMARY = 1;</code>
       */
      PRIMARY(1),
      /**
       * <pre>
       * Secondary channels are only used for encryption/decryption/authentication purposes.
       * Their radio settings (freq etc) are ignored, only psk is used.
       * </pre>
       *
       * <code>SECONDARY = 2;</code>
       */
      SECONDARY(2),
      UNRECOGNIZED(-1),
      ;

      /**
       * <pre>
       * This channel is not in use right now
       * </pre>
       *
       * <code>DISABLED = 0;</code>
       */
      public static final int DISABLED_VALUE = 0;
      /**
       * <pre>
       * This channel is used to set the frequency for the radio - all other enabled channels must be SECONDARY
       * </pre>
       *
       * <code>PRIMARY = 1;</code>
       */
      public static final int PRIMARY_VALUE = 1;
      /**
       * <pre>
       * Secondary channels are only used for encryption/decryption/authentication purposes.
       * Their radio settings (freq etc) are ignored, only psk is used.
       * </pre>
       *
       * <code>SECONDARY = 2;</code>
       */
      public static final int SECONDARY_VALUE = 2;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Role valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static Role forNumber(int value) {
        switch (value) {
          case 0: return DISABLED;
          case 1: return PRIMARY;
          case 2: return SECONDARY;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Role>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Role> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Role>() {
              public Role findValueByNumber(int number) {
                return Role.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.geeksville.mesh.ChannelProtos.Channel.getDescriptor().getEnumTypes().get(0);
      }

      private static final Role[] VALUES = values();

      public static Role valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Role(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:Channel.Role)
    }

    public static final int INDEX_FIELD_NUMBER = 1;
    private int index_ = 0;
    /**
     * <pre>
     * The index of this channel in the channel table (from 0 to MAX_NUM_CHANNELS-1)
     * (Someday - not currently implemented) An index of -1 could be used to mean "set by name",
     * in which case the target node will find and set the channel by settings.name.
     * </pre>
     *
     * <code>int32 index = 1;</code>
     * @return The index.
     */
    @java.lang.Override
    public int getIndex() {
      return index_;
    }

    public static final int SETTINGS_FIELD_NUMBER = 2;
    private com.geeksville.mesh.ChannelProtos.ChannelSettings settings_;
    /**
     * <pre>
     * The new settings, or NULL to disable that channel
     * </pre>
     *
     * <code>.ChannelSettings settings = 2;</code>
     * @return Whether the settings field is set.
     */
    @java.lang.Override
    public boolean hasSettings() {
      return settings_ != null;
    }
    /**
     * <pre>
     * The new settings, or NULL to disable that channel
     * </pre>
     *
     * <code>.ChannelSettings settings = 2;</code>
     * @return The settings.
     */
    @java.lang.Override
    public com.geeksville.mesh.ChannelProtos.ChannelSettings getSettings() {
      return settings_ == null ? com.geeksville.mesh.ChannelProtos.ChannelSettings.getDefaultInstance() : settings_;
    }
    /**
     * <pre>
     * The new settings, or NULL to disable that channel
     * </pre>
     *
     * <code>.ChannelSettings settings = 2;</code>
     */
    @java.lang.Override
    public com.geeksville.mesh.ChannelProtos.ChannelSettingsOrBuilder getSettingsOrBuilder() {
      return settings_ == null ? com.geeksville.mesh.ChannelProtos.ChannelSettings.getDefaultInstance() : settings_;
    }

    public static final int ROLE_FIELD_NUMBER = 3;
    private int role_ = 0;
    /**
     * <pre>
     * TODO: REPLACE
     * </pre>
     *
     * <code>.Channel.Role role = 3;</code>
     * @return The enum numeric value on the wire for role.
     */
    @java.lang.Override public int getRoleValue() {
      return role_;
    }
    /**
     * <pre>
     * TODO: REPLACE
     * </pre>
     *
     * <code>.Channel.Role role = 3;</code>
     * @return The role.
     */
    @java.lang.Override public com.geeksville.mesh.ChannelProtos.Channel.Role getRole() {
      com.geeksville.mesh.ChannelProtos.Channel.Role result = com.geeksville.mesh.ChannelProtos.Channel.Role.forNumber(role_);
      return result == null ? com.geeksville.mesh.ChannelProtos.Channel.Role.UNRECOGNIZED : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (index_ != 0) {
        output.writeInt32(1, index_);
      }
      if (settings_ != null) {
        output.writeMessage(2, getSettings());
      }
      if (role_ != com.geeksville.mesh.ChannelProtos.Channel.Role.DISABLED.getNumber()) {
        output.writeEnum(3, role_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (index_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, index_);
      }
      if (settings_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getSettings());
      }
      if (role_ != com.geeksville.mesh.ChannelProtos.Channel.Role.DISABLED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, role_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.geeksville.mesh.ChannelProtos.Channel)) {
        return super.equals(obj);
      }
      com.geeksville.mesh.ChannelProtos.Channel other = (com.geeksville.mesh.ChannelProtos.Channel) obj;

      if (getIndex()
          != other.getIndex()) return false;
      if (hasSettings() != other.hasSettings()) return false;
      if (hasSettings()) {
        if (!getSettings()
            .equals(other.getSettings())) return false;
      }
      if (role_ != other.role_) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + INDEX_FIELD_NUMBER;
      hash = (53 * hash) + getIndex();
      if (hasSettings()) {
        hash = (37 * hash) + SETTINGS_FIELD_NUMBER;
        hash = (53 * hash) + getSettings().hashCode();
      }
      hash = (37 * hash) + ROLE_FIELD_NUMBER;
      hash = (53 * hash) + role_;
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.geeksville.mesh.ChannelProtos.Channel parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.geeksville.mesh.ChannelProtos.Channel parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.geeksville.mesh.ChannelProtos.Channel parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.geeksville.mesh.ChannelProtos.Channel parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.geeksville.mesh.ChannelProtos.Channel parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.geeksville.mesh.ChannelProtos.Channel parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.geeksville.mesh.ChannelProtos.Channel parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.geeksville.mesh.ChannelProtos.Channel parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.geeksville.mesh.ChannelProtos.Channel parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.geeksville.mesh.ChannelProtos.Channel parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.geeksville.mesh.ChannelProtos.Channel parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.geeksville.mesh.ChannelProtos.Channel parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.geeksville.mesh.ChannelProtos.Channel prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A pair of a channel number, mode and the (sharable) settings for that channel
     * </pre>
     *
     * Protobuf type {@code Channel}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Channel)
        com.geeksville.mesh.ChannelProtos.ChannelOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.geeksville.mesh.ChannelProtos.internal_static_Channel_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.geeksville.mesh.ChannelProtos.internal_static_Channel_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.geeksville.mesh.ChannelProtos.Channel.class, com.geeksville.mesh.ChannelProtos.Channel.Builder.class);
      }

      // Construct using com.geeksville.mesh.ChannelProtos.Channel.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        index_ = 0;
        settings_ = null;
        if (settingsBuilder_ != null) {
          settingsBuilder_.dispose();
          settingsBuilder_ = null;
        }
        role_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.geeksville.mesh.ChannelProtos.internal_static_Channel_descriptor;
      }

      @java.lang.Override
      public com.geeksville.mesh.ChannelProtos.Channel getDefaultInstanceForType() {
        return com.geeksville.mesh.ChannelProtos.Channel.getDefaultInstance();
      }

      @java.lang.Override
      public com.geeksville.mesh.ChannelProtos.Channel build() {
        com.geeksville.mesh.ChannelProtos.Channel result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.geeksville.mesh.ChannelProtos.Channel buildPartial() {
        com.geeksville.mesh.ChannelProtos.Channel result = new com.geeksville.mesh.ChannelProtos.Channel(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.geeksville.mesh.ChannelProtos.Channel result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.index_ = index_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.settings_ = settingsBuilder_ == null
              ? settings_
              : settingsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.role_ = role_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.geeksville.mesh.ChannelProtos.Channel) {
          return mergeFrom((com.geeksville.mesh.ChannelProtos.Channel)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.geeksville.mesh.ChannelProtos.Channel other) {
        if (other == com.geeksville.mesh.ChannelProtos.Channel.getDefaultInstance()) return this;
        if (other.getIndex() != 0) {
          setIndex(other.getIndex());
        }
        if (other.hasSettings()) {
          mergeSettings(other.getSettings());
        }
        if (other.role_ != 0) {
          setRoleValue(other.getRoleValue());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                index_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                input.readMessage(
                    getSettingsFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 24: {
                role_ = input.readEnum();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int index_ ;
      /**
       * <pre>
       * The index of this channel in the channel table (from 0 to MAX_NUM_CHANNELS-1)
       * (Someday - not currently implemented) An index of -1 could be used to mean "set by name",
       * in which case the target node will find and set the channel by settings.name.
       * </pre>
       *
       * <code>int32 index = 1;</code>
       * @return The index.
       */
      @java.lang.Override
      public int getIndex() {
        return index_;
      }
      /**
       * <pre>
       * The index of this channel in the channel table (from 0 to MAX_NUM_CHANNELS-1)
       * (Someday - not currently implemented) An index of -1 could be used to mean "set by name",
       * in which case the target node will find and set the channel by settings.name.
       * </pre>
       *
       * <code>int32 index = 1;</code>
       * @param value The index to set.
       * @return This builder for chaining.
       */
      public Builder setIndex(int value) {
        
        index_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The index of this channel in the channel table (from 0 to MAX_NUM_CHANNELS-1)
       * (Someday - not currently implemented) An index of -1 could be used to mean "set by name",
       * in which case the target node will find and set the channel by settings.name.
       * </pre>
       *
       * <code>int32 index = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        index_ = 0;
        onChanged();
        return this;
      }

      private com.geeksville.mesh.ChannelProtos.ChannelSettings settings_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.geeksville.mesh.ChannelProtos.ChannelSettings, com.geeksville.mesh.ChannelProtos.ChannelSettings.Builder, com.geeksville.mesh.ChannelProtos.ChannelSettingsOrBuilder> settingsBuilder_;
      /**
       * <pre>
       * The new settings, or NULL to disable that channel
       * </pre>
       *
       * <code>.ChannelSettings settings = 2;</code>
       * @return Whether the settings field is set.
       */
      public boolean hasSettings() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * The new settings, or NULL to disable that channel
       * </pre>
       *
       * <code>.ChannelSettings settings = 2;</code>
       * @return The settings.
       */
      public com.geeksville.mesh.ChannelProtos.ChannelSettings getSettings() {
        if (settingsBuilder_ == null) {
          return settings_ == null ? com.geeksville.mesh.ChannelProtos.ChannelSettings.getDefaultInstance() : settings_;
        } else {
          return settingsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The new settings, or NULL to disable that channel
       * </pre>
       *
       * <code>.ChannelSettings settings = 2;</code>
       */
      public Builder setSettings(com.geeksville.mesh.ChannelProtos.ChannelSettings value) {
        if (settingsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          settings_ = value;
        } else {
          settingsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The new settings, or NULL to disable that channel
       * </pre>
       *
       * <code>.ChannelSettings settings = 2;</code>
       */
      public Builder setSettings(
          com.geeksville.mesh.ChannelProtos.ChannelSettings.Builder builderForValue) {
        if (settingsBuilder_ == null) {
          settings_ = builderForValue.build();
        } else {
          settingsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The new settings, or NULL to disable that channel
       * </pre>
       *
       * <code>.ChannelSettings settings = 2;</code>
       */
      public Builder mergeSettings(com.geeksville.mesh.ChannelProtos.ChannelSettings value) {
        if (settingsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            settings_ != null &&
            settings_ != com.geeksville.mesh.ChannelProtos.ChannelSettings.getDefaultInstance()) {
            getSettingsBuilder().mergeFrom(value);
          } else {
            settings_ = value;
          }
        } else {
          settingsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The new settings, or NULL to disable that channel
       * </pre>
       *
       * <code>.ChannelSettings settings = 2;</code>
       */
      public Builder clearSettings() {
        bitField0_ = (bitField0_ & ~0x00000002);
        settings_ = null;
        if (settingsBuilder_ != null) {
          settingsBuilder_.dispose();
          settingsBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The new settings, or NULL to disable that channel
       * </pre>
       *
       * <code>.ChannelSettings settings = 2;</code>
       */
      public com.geeksville.mesh.ChannelProtos.ChannelSettings.Builder getSettingsBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getSettingsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The new settings, or NULL to disable that channel
       * </pre>
       *
       * <code>.ChannelSettings settings = 2;</code>
       */
      public com.geeksville.mesh.ChannelProtos.ChannelSettingsOrBuilder getSettingsOrBuilder() {
        if (settingsBuilder_ != null) {
          return settingsBuilder_.getMessageOrBuilder();
        } else {
          return settings_ == null ?
              com.geeksville.mesh.ChannelProtos.ChannelSettings.getDefaultInstance() : settings_;
        }
      }
      /**
       * <pre>
       * The new settings, or NULL to disable that channel
       * </pre>
       *
       * <code>.ChannelSettings settings = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.geeksville.mesh.ChannelProtos.ChannelSettings, com.geeksville.mesh.ChannelProtos.ChannelSettings.Builder, com.geeksville.mesh.ChannelProtos.ChannelSettingsOrBuilder> 
          getSettingsFieldBuilder() {
        if (settingsBuilder_ == null) {
          settingsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.geeksville.mesh.ChannelProtos.ChannelSettings, com.geeksville.mesh.ChannelProtos.ChannelSettings.Builder, com.geeksville.mesh.ChannelProtos.ChannelSettingsOrBuilder>(
                  getSettings(),
                  getParentForChildren(),
                  isClean());
          settings_ = null;
        }
        return settingsBuilder_;
      }

      private int role_ = 0;
      /**
       * <pre>
       * TODO: REPLACE
       * </pre>
       *
       * <code>.Channel.Role role = 3;</code>
       * @return The enum numeric value on the wire for role.
       */
      @java.lang.Override public int getRoleValue() {
        return role_;
      }
      /**
       * <pre>
       * TODO: REPLACE
       * </pre>
       *
       * <code>.Channel.Role role = 3;</code>
       * @param value The enum numeric value on the wire for role to set.
       * @return This builder for chaining.
       */
      public Builder setRoleValue(int value) {
        role_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * TODO: REPLACE
       * </pre>
       *
       * <code>.Channel.Role role = 3;</code>
       * @return The role.
       */
      @java.lang.Override
      public com.geeksville.mesh.ChannelProtos.Channel.Role getRole() {
        com.geeksville.mesh.ChannelProtos.Channel.Role result = com.geeksville.mesh.ChannelProtos.Channel.Role.forNumber(role_);
        return result == null ? com.geeksville.mesh.ChannelProtos.Channel.Role.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * TODO: REPLACE
       * </pre>
       *
       * <code>.Channel.Role role = 3;</code>
       * @param value The role to set.
       * @return This builder for chaining.
       */
      public Builder setRole(com.geeksville.mesh.ChannelProtos.Channel.Role value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        role_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * TODO: REPLACE
       * </pre>
       *
       * <code>.Channel.Role role = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearRole() {
        bitField0_ = (bitField0_ & ~0x00000004);
        role_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:Channel)
    }

    // @@protoc_insertion_point(class_scope:Channel)
    private static final com.geeksville.mesh.ChannelProtos.Channel DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.geeksville.mesh.ChannelProtos.Channel();
    }

    public static com.geeksville.mesh.ChannelProtos.Channel getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Channel>
        PARSER = new com.google.protobuf.AbstractParser<Channel>() {
      @java.lang.Override
      public Channel parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Channel> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Channel> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.geeksville.mesh.ChannelProtos.Channel getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_ChannelSettings_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_ChannelSettings_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Channel_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Channel_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\rchannel.proto\"\203\001\n\017ChannelSettings\022\027\n\013c" +
      "hannel_num\030\001 \001(\rB\002\030\001\022\013\n\003psk\030\002 \001(\014\022\014\n\004nam" +
      "e\030\003 \001(\t\022\n\n\002id\030\004 \001(\007\022\026\n\016uplink_enabled\030\005 " +
      "\001(\010\022\030\n\020downlink_enabled\030\006 \001(\010\"\213\001\n\007Channe" +
      "l\022\r\n\005index\030\001 \001(\005\022\"\n\010settings\030\002 \001(\0132\020.Cha" +
      "nnelSettings\022\033\n\004role\030\003 \001(\0162\r.Channel.Rol" +
      "e\"0\n\004Role\022\014\n\010DISABLED\020\000\022\013\n\007PRIMARY\020\001\022\r\n\t" +
      "SECONDARY\020\002Ba\n\023com.geeksville.meshB\rChan" +
      "nelProtosH\003Z\"github.com/meshtastic/go/ge" +
      "nerated\252\002\024Meshtastic.Protobufsb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_ChannelSettings_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_ChannelSettings_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_ChannelSettings_descriptor,
        new java.lang.String[] { "ChannelNum", "Psk", "Name", "Id", "UplinkEnabled", "DownlinkEnabled", });
    internal_static_Channel_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_Channel_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Channel_descriptor,
        new java.lang.String[] { "Index", "Settings", "Role", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
